{"version":3,"sources":["components/Lights.js","components/ParticleField.js","components/Scene.js","components/Controls.js","views/Home/Home.js"],"names":["Lights","props","Light","type","defaultProps","ParticleField","count","mouse","mesh","useRef","light","useThree","size","viewport","aspect","width","dummy","useMemo","THREE","particles","temp","i","t","Math","random","factor","speed","xFactor","yFactor","zFactor","push","mx","my","useFrame","state","current","position","set","forEach","particle","a","cos","sin","b","s","scale","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","distance","intensity","color","args","attach","Scene","extend","OrbitControls","Controls","controlsRef","camera","gl","update","domElement","enableRotate","enablePan","maxDistance","minDistance","minPolarAngle","PI","maxPolarAngle","Home","connect","isLoginSuccess","authentication","dispatch","history","dataReset","dataActions","useState","onMouseMove","useCallback","x","clientX","y","clientY","window","innerWidth","innerHeight","className","onMouseUp","onMouseDown"],"mappings":"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","file":"static/js/10.a596aac2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Lights(props) {\n  const { type } = props;\n  const Light = type;\n\n  return <Light {...props} />;\n}\n\nLights.propTypes = {\n  type: PropTypes.string\n};\n\nLights.defaultProps = {\n  type: ''\n};\n\nexport default Lights;\n","import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nexport default function ParticleField({ count, mouse }) {\n  const mesh = useRef()\n  const light = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n\n  const dummy = useMemo(() => new THREE.Object3D(), [])\n  // Generate some random positions, speed factors and timings\n  const particles = useMemo(() => {\n    const temp = []\n    for (let i = 0; i < count; i++) {\n      const t = Math.random() * 100\n      const factor = 20 + Math.random() * 100\n      const speed = 0.01 + Math.random() / 200\n      const xFactor = -50 + Math.random() * 100\n      const yFactor = -50 + Math.random() * 100\n      const zFactor = -50 + Math.random() * 100\n      temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n    }\n    return temp\n  }, [count])\n\n  // The innards of this hook will run every frame\n  useFrame(state => {\n    // Makes the light follow the mouse\n    light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0)\n    // Run through the randomized data to calculate some movement\n    particles.forEach((particle, i) => {\n      let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n      // There is no sense or reason to any of this, just messing around with trigonometric functions\n      t = particle.t += speed / 2\n      const a = Math.cos(t) + Math.sin(t * 1) / 10\n      const b = Math.sin(t) + Math.cos(t * 2) / 10\n      const s = Math.cos(t)\n      particle.mx += (mouse.current[0] - particle.mx) * 0.01\n      particle.my += (mouse.current[1] * -1 - particle.my) * 0.01\n      // Update the dummy object\n      dummy.position.set(\n        (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n        (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n        (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n      )\n      dummy.scale.set(s, s, s)\n      dummy.rotation.set(s * 5, s * 5, s * 5)\n      dummy.updateMatrix()\n      // And apply the matrix to the instanced item\n      mesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    mesh.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <>\n      <pointLight ref={light} distance={40} intensity={8} color=\"lightblue\" />\n      <instancedMesh ref={mesh} args={[null, null, count]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.3, 0]} />\n        <meshPhongMaterial attach=\"material\" color=\"#050505\" />\n      </instancedMesh>\n    </>\n  )\n}\n","import React from 'react';\nimport Lights from './Lights';\nimport ParticleField from './ParticleField';\n\nfunction Scene(props) {\n\n  return (\n    <>\n      <Lights\n        type='AmbientLight'\n        color={0xffffff}\n        intensity={0.8}\n        position={[10, 10, 10]}\n      />\n      <Lights\n        type='PointLight'\n        color={0xffffff}\n        intensity={0.8}\n        position={[10, 10, 10]}\n      />\n      <ParticleField count={1000} mouse={props.mouse}/>\n    </>\n  );\n}\n\nexport default Scene;\n","import React, { useRef } from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nextend({ OrbitControls });\n\nfunction Controls() {\n  const controlsRef = useRef();\n  const { camera, gl } = useThree();\n\n  useFrame(() => controlsRef.current && controlsRef.current.update());\n\n  return (\n    <orbitControls\n      ref={controlsRef}\n      args={[camera, gl.domElement]}\n      enableRotate\n      enablePan={false}\n      maxDistance={100}\n      minDistance={5}\n      minPolarAngle={Math.PI / 6}\n      maxPolarAngle={Math.PI / 2}\n    />\n  );\n}\n\nexport default Controls;\n","import React, { useState, useCallback, useRef } from 'react';\nimport { dataActions } from '../../actions';\nimport { connect } from 'react-redux';\nimport { Canvas } from 'react-three-fiber';\nimport Scene from '../../components/Scene';\nimport Controls from '../../components/Controls';\n\nfunction HomePage() {\n  const [set] = useState(false)\n  const mouse = useRef([0, 0])\n  const onMouseMove = useCallback(({ clientX: x, clientY: y }) => (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]), [])\n\n  return (\n    <div className='canvas'>\n      <Canvas\n        onMouseMove={onMouseMove}\n        onMouseUp={() => set(false)}\n        onMouseDown={() => set(true)}>\n        <Scene mouse={mouse}/>\n        <Controls />\n      </Canvas>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    isLoginSuccess: state.authentication.isLoginSuccess,\n  };\n}\n\nconst mapDispatchToProps = (dispatch, history) => {\n  return {\n    dataReset: () => dispatch(dataActions.dataReset())\n  };\n}\n\nconst Home = connect(mapStateToProps, mapDispatchToProps)(HomePage);\nexport default Home;\n"],"sourceRoot":""}